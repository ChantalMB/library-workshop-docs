var suggestions=document.getElementById("suggestions"),search=document.getElementById("search");search!==null&&document.addEventListener("keydown",inputFocus);function inputFocus(e){e.ctrlKey&&e.key==="/"&&(e.preventDefault(),search.focus()),e.key==="Escape"&&(search.blur(),suggestions.classList.add("d-none"))}document.addEventListener("click",function(e){var t=suggestions.contains(e.target);t||suggestions.classList.add("d-none")}),document.addEventListener("keydown",suggestionFocus);function suggestionFocus(e){const s=suggestions.classList.contains("d-none");if(s)return;const t=[...suggestions.querySelectorAll("a")];if(t.length===0)return;const n=t.indexOf(document.activeElement);if(e.key==="ArrowUp"){e.preventDefault();const s=n>0?n-1:0;t[s].focus()}else if(e.key==="ArrowDown"){e.preventDefault();const s=n+1<t.length?n+1:n;t[s].focus()}}(function(){var e=new FlexSearch.Document({tokenize:"forward",cache:100,document:{id:"id",store:["href","title","description"],index:["title","description","content"]}});e.add({id:0,href:"/",title:"Introduction",description:"Foundations for the fresh digital humanist.",content:`Digital humanities can be defined as a scholarly community of practice in which humanists use computational methodologies to solve a range of research problems.
Typically, humanists are scholars in fields such as history, literary studies, religious studies, music, archaeology, philosophy, and linguistics.
They are trained in the qualitative research methods of these humanistic disciplines and then adopt computational methods that require an expertise in computer programming.
This suite of workshops is designed to introduce humanists to computational methods. The goal is for participants to gain an understanding of the role that computer programming can play in completing a number of basic humanistic research tasks and the capacity to begin to use a core set of computing platforms.
Participants will not learn to be computer programmers–– these skills require extensive training and experience to acquire. However, participants will be able to use some basic tools and to have preliminary conversations about computational methods and tools, conversations that may enable them to decide whether they wish to further integrate these strategies into their own work.
`}),e.add({id:1,href:"/docs/prologue/",title:"Prologue",description:"Prologue Doks.",content:""}),e.add({id:2,href:"/docs/workshop-i/",title:"Module I: The Command Line \u0026 Git",description:"Workshop I",content:""}),e.add({id:3,href:"/docs/workshop-ii/",title:"Module II: Intro to Python Pt. 1",description:"Workshop II",content:""}),e.add({id:4,href:"/docs/workshop-iii/",title:"Module III: Intro to Python Pt. 2",description:"Workshop III",content:""}),e.add({id:5,href:"/workshop-i/glossary-for-module-1/",title:"Glossary for Module 1",description:"A glossary for common workshop terms.",content:`Part I: Command line environment # Command line
The command line is a blank line and cursor on the screen, allowing the user to type in instructions for the computer to execute. Command line interface
A command line interface is a text-based user interface for a computer. Miniconda
Miniconda is a command line environment; this is something which allows you to install programming related tools in their own “bubble” on your computer so that they can easily be managed/removed. Directory
Same thing as a folder! A location/space for storing files on your computer. An example of a location/space is your device’s “Desktop”. Part II: Text editor # Markup language
A markup language is a text encoding system used to structure, format, index, and link text files, resulting in a text that is easy for your computer to process and read.. The most popular example of a markup language is HTML. Markdown
A markup language with simple syntax (grammar) that formats text (e.g., creates headers, paragraphs, bold font, italics) GitHub uses Markdown for text, as does Jupyter Notebook. Text editor
A program which allows a user to edit the contents of a text file. Code Editor
A text editor with advanced functionality to help with the writing of code. Text editor and code editor are often used interchangeably! Historically, there were only text editors. Visual Studio Code
A code editor used for writing and editing code as well as taking notes in Markdown. Part III: Git and GitHub # Git
Git is an open access “version control system” that allows you to track and control (i.e. manage) your computing projects. As a version control system, it allows you to return to a previous version of your code should something go wrong. Git repository
Git’s virtual storage space for a project. When you use Git to manage your project folder, that folder becomes a repository Repositories are often referred to as a “repo”. GitHub
GitHub is a hosting service for Git repositories. Local
This term refers to something only on your personal device, such as a file that has yet to be added to a GitHub repository. Remote
Remote repositories are versions of a project that are hosted off your computer, on the internet or another external network somewhere. Personal access token
A personal access token (PAT) is an alternative to using passwords for authentication to GitHub. Personal access tokens enable individuals to access their GitHub resources via the command line. Elements of a Git repository
README.md A file that contains the documentation for a project. Folder (project) content Commits A “commit” is the note you will see to the right of the file listings in your GitHub repository. They capture a snapshot of a project\u0026rsquo;s currently staged changes. Committed snapshots can be thought of as “safe” versions of a project—Git will never change them unless you explicitly ask it to. Branch In a Git repository, a branch is a place where the changes to your code are stored and recorded. You will always have a primary branch formed when you create a Git repository. In projects where multiple people are working on different elements of the code, there will be multiple branches for each element. `}),e.add({id:6,href:"/workshop-i/pre-workshop-tasks/",title:"Pre-Workshop Tasks",description:"Please complete these activities prior to attending the workshop.",content:`Read # The Schism at the Heart of the Open-Source Movement by Sidney Fussell
Do # For those using Apple devices: You can make the installation of the following list very quick and easy by first installing Homebrew. Search \u0026ldquo;terminal\u0026rdquo; using Spotlight or in Finder, open the application, then paste the command featured centerally on the linked webpage (hit the little clipboard beside it) and hit enter! I will provide the installation commands for each item listed below that you can enter into the terminal after installing Homebrew. Additionally, if this is your first time using Terminal enter the command which Terminal provides on launch in order to upgrade your shell from bash to zsh, then close and reopen Terminal.
📣 Beware: Depending on your internet connectivity, Homebrew can take a long time to install. Best to just run the command and carry about your day, checking on it every so often to make sure there's no error message. If you receieve an error message that you cannot decipher, take a screenshot of your command line and send it to Chantal or Martha so we can help you troubleshoot! Install Miniconda
You likely want the 64-bit version This is a \u0026ldquo;command line environment\u0026rdquo;, which essentially means that having this installed allows us to create a container for all of our tech work so that even if something was to go wrong, it would only be in the container and not effect the rest of your computer! Windows Users: From this download, we will be using the Anaconda3 Powershell Prompt! Homebrew installation command: brew install --cask miniconda Note: After this Homebrew command finishes running, type conda activate and you will recieve an error stating that your terminal has not been configured properly yet. Do as this error says and run conda init bash or conda init zsh depending on which shell name is written in the top bar of your terminal (the same bar where the \u0026ldquo;Exit\u0026rdquo; and \u0026ldquo;Minimize\u0026rdquo; buttons are found). After this, close then reopen the terminal so it updates\u0026ndash; at the beginning of your command prompt, you should see (base). Download Visual Studio Code
More commonly referred to as \u0026ldquo;VS Code\u0026rdquo;, this is a \u0026ldquo;text editor\u0026rdquo; which allows you to write notes in Markdown (a markup language that many web-based platforms use, such as this website). Homebrew installation command: brew install --cask visual-studio-code Install Git
Git is a version control software, which is a fancy way of saying it lets you save your projects at any point in the process of creation, and if something goes wrong you can revert the project back to any one of these saved points. We use it via the command line, because instead of tracking and saving just a single file, it does so for a whole folder on your desktop! Homebrew installation command: brew install git Create a GitHub account
Github is a repository hosting tool for the projects you save and track with Git. It allows you to publicly share your work. `}),e.add({id:7,href:"/workshop-i/working-in-the-command-line/",title:"Working in the Command Line",description:"A reference for common commands used when working with the command line interface (CLI).",content:` 📣 Don't use spaces in your file or folder names! This can result in errors where your computer thinks the name is a command-- instead, replace spaces with underscores (Ex. coding_workshop rather than coding workshop) Command Line Basics # Mac \u0026amp; Linux Windows Powershell Use cd [path_to_file] cd [path_to_file] change directory\u0026ndash; go to a different folder on your computer cd .. cd .. This takes you back a directory level. If your filepath looks like Desktop/myFolder/data/, entering cd .. will take you back to just Desktop/myFolder/. ls ls list all the files in the folder you\u0026rsquo;re currently in pwd pwd print working directory\u0026ndash; if you forget what folder you\u0026rsquo;re in, type this and the command line will tell you where you are mkdir [folder] mkdir [folder] Creates a new directory (aka folder) in the directory you\u0026rsquo;re in man [command] help [command] Tells you what a command does by outputting the documentation for it Keyboard Shortcuts for the Command Line # Command Use ctrl + c Cancels the command that is currently running, meaning that the command will stop whatever it\u0026rsquo;s doing immediately. up and down arrow keys Allows you to see (and re-run) commands you have previously typed tab Auto-completes file or path names based on the directory you\u0026rsquo;re in. Common Conda Commands # Command Use conda create --name [your_environment_name] python=[python version such as 3.9] Creates a new conda environment for you to work in. conda install [package name] Installs a package into your conda environment. conda list Lists all of the packages installed in your current, active environment conda env list Lists all of the conda environments you\u0026rsquo;ve created conda env remove --name [your_environment_name] Deletes an environment and everything in it. For more commands and resources, see the full conda cheat sheet.
Bonus (MacOS): Styling Your Command Line # Black-on-white can be difficult to read and harsh on the eyes, so you may want to consider giving it a more friendly colour scheme! To do so, download your favourite theme from this repository and follow the installation instructions also provided in the README.
You can also use Homebrew to install Neofetch with the command brew install neofetch. Neofetch will give you up-to-date information on your computer\u0026rsquo;s software and hardware each time you open your terminal!
Bonus (Windows): Windows Terminal for \u0026ldquo;All-in-One\u0026rdquo; CLI # Unlike the command line \u0026ldquo;shells\u0026rdquo; such as zsh or bash found on UNIX-based operating systems such as MacOS or Linux, Windows created its own version, Powershell. Powershell makes things a bit complicated for programming because it requires all command line tools to install their own separate CLIs (ex Anaconda Powershell Prompt, rather than being accessible from just the single Windows Powershell Prompt!
Microsoft has recently released Windows Terminal as somewhat of a solution to keeping all your tools in one place\u0026ndash; you can add all your various CLIs into this terminal and open them in separate tabs rather than separate windows!
Here is a guide to adding Git Bash Here is a guide to adding Anaconda Powershell Prompt `}),e.add({id:8,href:"/workshop-i/markdown-reference/",title:"Markdown Reference",description:"A reference for writing in Markdown.",content:'More information on Markdown can be found here.\nStyling Markdown Headings # H1 ## H2 ### H3 Bold **bold text** Italic *italicized text* Blockquote \u003e Quotation Ordered list 1. First item 2. Second item 3. Third item Bullets - First item - Second item - Third item Task list - [x] Write the press release - [ ] Update the website - [ ] Contact the media Definition list term : definition Code `one line of code` Code block ``` { "firstName": "Multiple", "lastName": "Lines-of-Code", "age": 2 } ``` / Link [some text which will be the hyperlink](https://www.alink.com) Image ![alt text](link_or_file_path_to_image.jpg) Horizontal rule --- Table | Artifact | Observations | | ----------- | ----------- | | item1 | comments | | item2 | comments | Footnote Here\'s a sentence with a footnote. [^1] [^1]: This is the footnote. Subscript~1 H~2~O Superscript^1 X^2^ Strikethrough ~~Strikethrough~~ Highlight I need to highlight these ==very important words==. '}),e.add({id:9,href:"/workshop-i/connecting-git-and-github/",title:"Connecting Git and GitHub",description:"Steps for connecting Git (local to your device) to GitHub (on the web).",content:`There are two options that will allow you to connect to GitHub from your computer; you can either create a personal access token (PAT) and connect via HTTPS (Hypertext Transfer Protocol Secure) or you can generate an SSH (Secure Shell) key for your device. Both, as you may have guessed by the name, are secure ways to transfer files to your GitHub account by letting GitHub know that your personal device can be trusted through a unique and elaborate \u0026ldquo;key\u0026rdquo;, much like a password.
The significant positive of using a PAT is how simple it is to set up! The negative is that you must keep it stored like a password, because you will need to enter it on any other devices that you intend to connect Git and GitHub on.
If you run into trouble setting up your PAT, then you can also try generating an SSH key for GitHub. This is slightly more complicated to get up-and-running, but you don\u0026rsquo;t have to write anything down since you generate a unique SSH key for every device you would like to connect!
👉 Windows Users: To configure Git and perform the initial set up of GitHub on your device, you must use Git Bash which is located under the Git folder that can be accessed from the Start menu. After this step is done you may continue to use the Anaconda Powershell Prompt! Configuring Git # These commands modify the configuration file (aka Settings) for Git, hence calling git config. The flag --global means that these configurations will only be applied to the user account you\u0026rsquo;re logged into, rather than to every account on your device (assuming there\u0026rsquo;s multiple).
To add a username associated with your device\u0026rsquo;s Git profile (tip: use your Github username so this is easy to remember): git config --global user.name \u0026quot;Your GitHub name here\u0026quot; To add an email associated with your device\u0026rsquo;s Git profile (use the same email you used for Github): git config --global user.email \u0026quot;your_email@example.com\u0026quot; To make Git output use colour (easier to read): git config --global color.ui true Option #1: Using a PAT # On the GitHub website, go to your profile settings which can be accessed by selecting your profile picture in the upper right corner of the page. In the left hand menu, scroll down to the bottom and open \u0026ldquo;Developer settings\u0026rdquo; Select \u0026ldquo;Personal access tokens\u0026rdquo;, then hit the button which says \u0026ldquo;Generate new token\u0026rdquo; Once on the \u0026ldquo;New personal access token\u0026rdquo; page you will:
Set the expiry date for your PAT- this is the interval at which you will have to generate a new PAT. Choose however long you feel comfortable keeping this \u0026ldquo;password\u0026rdquo; active for! Grant access permissions for this PAT- since you are the admin user of your device that is connecting to your GitHub account, we suggest ticking every checkbox to make sure you do not miss any permissions you may need. Once your PAT is generated, save it with the rest of your passwords and treat it like one! If you accidentally push it to GitHub in a note file, the PAT will automatically be disabled and you will have to create a new one.
In the next step of this workshop, when you enter the git push command:
On MacOS: You will be prompted in the command line to enter your GitHub username and password. Enter your username as expected, but enter your PAT as the password to connect your account. On Windows: A login box will open giving you ways to connect to GitHub; select the option which asks to use a PAT and proceed as instructed. Should you ever need to remove your PAT to set a new one, you can use the follow comannd to find the PAT:
security find-internet-password -l github.com And then this command to delete it:
security delete-internet-password -l github.com Option #2: Using an SSH key # Generate the SSH key # Enter:
ssh-keygen -t ed25519 -C \u0026quot;your_email@example.com\u0026quot; ssh-keygen: Command to let your computer know that you want to generate a SSH key -t: Flag that stands for \u0026rsquo;type' ed25519: The \u0026rsquo;type\u0026rsquo; of SSH key aka the algorithim used to generate it -C: Attaches your email to this key as a \u0026lsquo;comment\u0026rsquo; If you are prompted for a file location, just hit enter so your SSH key is saved at the default location on your device.
Add SSH key to GitHub # Start the SSH-agent in the background so that your SSH key will be active:
eval \u0026quot;\$(ssh-agent -s)\u0026quot; This will return something along the lines of Agent pid [some numbers].
Add your SSH key to the active agent:
ssh-add ~/.ssh/id_ed25519 Copy the SSH key to your clipboard:
For Windows:
clip \u0026lt; ~/.ssh/id_ed25519.pub For Mac:
pbcopy \u0026lt; ~/.ssh/id_ed25519.pub Now that your SSH key is activated and copied to your clipboard, in your browser go to GitHub. Go to your account settings,which are accessible from the dropdown menu that appears when you click your icon in the upper right corner of the webpage. In settings, select \u0026ldquo;SSH and GPG Keys\u0026rdquo; from the menu to the left, then click the green \u0026ldquo;New SSH key\u0026rdquo; button. In the smaller input box enter a nickname for the device which your SSH key is associated with, and in the larger input box paste your SSH key.
`}),e.add({id:10,href:"/workshop-i/pushing-to-github-static-site-resources/",title:"Pushing to GitHub \u0026 Static Site Resources",description:"Adding content to a GitHub repository (repo) and creating static sites.",content:`Using Git # Creating a repository and adding it to Github # After going on to GitHub and creating a new repository by hitting the \u0026ldquo;+\u0026rdquo; symbol in the upper right corner:
echo \u0026quot;# [your_project_name]\u0026quot; \u0026gt;\u0026gt; README.md This creates a README file (which you can modify later). git init This initializes your folder as a git repository (aka to be tracked with git). git add -A This command adds all of the files and/or changes you have made to the files in your folder to the git repository. git commit -m \u0026quot;first commit\u0026quot; This command confirms what you have added by requiring you to describe the additions you are making to your git repository. git branch -M main This sets the name of your repository\u0026rsquo;s primary branch; \u0026ldquo;main\u0026rdquo; could be replaced by any word you please! git remote add origin [link to your repository on github] This tells git that you would like to connect the repository currently on your device to an externally hosted, \u0026ldquo;remote\u0026rdquo; service. In our case, this is GitHub. git push -u origin main This is the final \u0026ldquo;save\u0026rdquo;, confirming all of the changes you made and fully adding them to both your local git repository and your remote repository on GitHub. Updating your repository following its creation # 👉 If you are working in a repo that has multiple users, your first command before should be git pull so that the repository on your computer receives any changes made by other users! git add -A git commit -m \u0026quot;A message about what you are adding to the repository with this update\u0026quot; git push -u origin main (note: you can also simply type git push, but specifiying the origin is helpful if there is more than one person working in your repository). Publishing a Static Site # Once you have Markdown files on GitHub, creating static pages is simple! Go to the \u0026ldquo;Settings\u0026rdquo; tab of you repository on GitHub, then select \u0026ldquo;Pages\u0026rdquo; from the menu: In these GitHub Pages settings, change the source from \u0026ldquo;None\u0026rdquo; to your \u0026ldquo;main\u0026rdquo; branch and hit save to publish your site!
Now, while we wait for our site to publish, we can pick and add a theme! In VS Code, we will create a new text file (File \u0026gt; New Text File). This will be your \u0026ldquo;configuration file\u0026rdquo;, meaning that this is where you will set the theme you would like to use, so save this file as _config.yml in the same folder as your markdown page. Now that you have a configuration file set up, you can check out this list of themes GitHub Pages automatically supports! The links on this page will take you to a GitHub repository, and if you scroll down to the README, there will be a link that allows you to preview the selected theme, as well as instructions on what to paste into your configuration file in order to use the theme under the heading Usage.
Once you have selected the theme you want to use and have pasted the information provided in the theme\u0026rsquo;s README, you will save your configuration file and go through the git add-commit-push cycle once again to update your GitHub repository with your new file.
📣 Note: It can take up to 10 minutes for your site to publish! This workshop covers how to publish a single page static site, but if you would like to challenge yourself and use what you learned in this workshop today to go further, here are some resources about creating a complete static site (like this very site you\u0026rsquo;re on right now!) using a static site generator:
Hugo How to install Hugo Quick start which walks you through setting up a site following install Hugo site themes Jekyll (Note: Challenging to use with Windows) How to install Jekyll Step-by-Step tutorial on setting up static site Jekyll themes and other resources `}),e.add({id:11,href:"/workshop-ii/pre-workshop-tasks/",title:"Pre-Workshop Tasks",description:"Please complete these activities prior to attending the workshop.",content:"Prerequisite for this workshop # Have basic knowledge of the command line Understanding of Git and Github Already have installed: Miniconda A text editor Git It is strongly recommended that you have taken our DH basics workshop prior to attending this one, as it covers all of the above topics.\nDo # 👉 Remember that if something is in square brackets `[like this]` you should fill in where the square brackets are with what it is indicating you should enter without including the square bracket. Install Jupyter Notebook This is what is known as a \u0026ldquo;computational notebook\u0026rdquo;. Within Jupyter Notebook, you can both write and run code as well as take notes or explain what you\u0026rsquo;re doing, making it an excellent platform for sharing your work with others. You can install it by running this command in the conda environment you wish to work in: conda install -c conda-forge notebook Download this repository for use during this workshop\nTo download, select the bright green \u0026ldquo;Code\u0026rdquo; button and either Copy the repo \u0026ldquo;key\u0026rdquo; and enter git clone [copied key] into the command line Select \u0026ldquo;Download ZIP\u0026rdquo; then unzip the file 👉 We suggest placing this folder somewhere easy to navigate to from the command line, such as on your desktop. "}),e.add({id:12,href:"/workshop-iii/pre-workshop-tasks/",title:"Pre-Workshop Tasks",description:"Please complete these activities prior to attending the workshop.",content:"Pre-workshop Tasks # Update your repository of notebooks for this workshop by cding into the directory and entering the command git pull If this does not work, refer back to the \u0026ldquo;Pre-Workshop Tasks\u0026rdquo; of the first Python workshop for instruction on how to download the repository from GitHub "}),e.add({id:13,href:"/workshop-iii/common-errors/",title:"Common Errors",description:"Explaining some errors you may encounter as you advance in your programming journey!",content:`Common Python Errors # Reminder: Read the whole error message! Python often points to the line where the error is at the beginning of the message, and at the end when it states the type of error, also often offers a suggestion to fix the error.
Error Meaning Solution? ModuleNotFoundError Python couldn\u0026rsquo;t find the thing you tried to import At the top of your notebook create a new cell and enter !pip install [the module that could not be found], then run to install or update the missing module SyntaxError You\u0026rsquo;re missing something vital to how the Python langauge must be written in order to be understood by the computer Check for small things like a missing \u0026ldquo;:\u0026rdquo; in a loop or if statement, or missing parentheses IndexError You attempted to access a position in a list that doesn\u0026rsquo;t exist Remember that in Python, counting starts at 0, so if you have 3 items in your list and you want to access the final item, it would look like list[2] not list[3] TypeError You tried to use a certain data type in a situation where it cannot be used Did you perhaps try to add a string and an integer together? Or concatenate a string where one of the variables in the concatenation is something other than a string? NameError An object you tried to use could not be found You likely tried to use a variable and either misspelled or forgot to declare it! If none of these solutions help, try using this formula to perform a Google search:
python \u0026ldquo;[error message]\u0026rdquo; solution `}),e.add({id:14,href:"/workshop-ii/comparison-operators/",title:"Comparison Operators",description:"Operators for comparing data types.",content:"Common Python Errors # 📣 Remember: '=' is the assignment operator, not used for comparison! Operator Meaning == Equal to != Not equal to \u0026lt; Less than \u0026gt; Greater than \u0026lt;= Less than or equal to \u0026gt;= Greater than or equal to "}),e.add({id:15,href:"/workshop-iii/pandas-quick-reference/",title:"Pandas Quick Reference",description:"For examples of these functions in action, refer to the workshop notebook.",content:`Useful pandas functions # Note: In this table, df represents your dataframe variable
Function Purpose df.describe() Computes summary statistics for numerical columns df[\u0026quot;colname\u0026quot;] Selects column and outputs the column as a series df[[\u0026quot;colname\u0026quot;]] Selects column and outputs the column as a dataframe df[\u0026quot;colname\u0026quot;].value_counts() Counts unique values in specified column df[df[\u0026quot;colname\u0026quot;] == 'searchTerm'] Filters your dataframe to only show rows that include the search term df[\u0026quot;colname\u0026quot;].isna() OR df[\u0026quot;colname\u0026quot;].notna() Checks for values that are NaN (aka cells that are empty) df[\u0026quot;colname\u0026quot;].fillna(\u0026quot;text\u0026quot;) Replaces NaN values with specified \u0026ldquo;text\u0026rdquo; df.rename(columns={\u0026quot;current_colname\u0026quot;: \u0026quot;new_colname\u0026quot;}) Allows you to rename column df.drop(columns=\u0026quot;colname\u0026quot;) Removes or \u0026ldquo;drops\u0026rdquo; column from dataframe df[\u0026quot;new_colname\u0026quot;] = [\u0026quot;list\u0026quot;, \u0026quot;of\u0026quot;, \u0026quot;values\u0026quot;] To add a new column, simply declare column name and then assign the values (as a list) you want to use to populate the column df[\u0026quot;colname\u0026quot;].str.lower() Example of how any string methods can be used to transform all strings in specified column of dataframe Further Resources # Pandas in 10 Minutes Communities for individuals learning to code `}),e.add({id:16,href:"/workshop-ii/boolean-operators/",title:"Boolean Operators",description:"For the comparison of boolean values (True and False).",content:"\u0026ldquo;and\u0026rdquo; # Expression Evaluation True and True True True and False False False and True False False and False False \u0026ldquo;or\u0026rdquo; # Expression Evaluation True or True True True or False True False or True True False or False False "}),e.add({id:17,href:"/workshop-ii/further-resources/",title:"Further Resources",description:"A small collection of introductory Python resources.",content:" W3Schools Python guide Melanie Walsh\u0026rsquo;s course on Cultural Analytics The Programming Historian "}),e.add({id:18,href:"/docs/",title:"Docs",description:"Docs Doks.",content:`meep
`}),search.addEventListener("input",t,!0);function t(){const s=5;var n=this.value,o=e.search(n,{limit:s,enrich:!0});const t=new Map;for(const e of o.flatMap(e=>e.result)){if(t.has(e.doc.href))continue;t.set(e.doc.href,e.doc)}if(suggestions.innerHTML="",suggestions.classList.remove("d-none"),t.size===0&&n){const e=document.createElement("div");e.innerHTML=`No results for "<strong>${n}</strong>"`,e.classList.add("suggestion__no-results"),suggestions.appendChild(e);return}for(const[r,a]of t){const n=document.createElement("div");suggestions.appendChild(n);const e=document.createElement("a");e.href=r,n.appendChild(e);const o=document.createElement("span");o.textContent=a.title,o.classList.add("suggestion__title"),e.appendChild(o);const i=document.createElement("span");if(i.textContent=a.description,i.classList.add("suggestion__description"),e.appendChild(i),suggestions.appendChild(n),suggestions.childElementCount==s)break}}})()